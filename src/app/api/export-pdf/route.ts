import { NextRequest, NextResponse } from 'next/server';
import { createServerSupabaseClient } from '@/lib/supabase';
import jsPDF from 'jspdf';

interface ExportPDFRequest {
  courseId?: string;
  courseData?: unknown;
  includeWatermark?: boolean;
}

export async function POST(request: NextRequest) {
  try {
    console.log('🚀 PDF Export API called');
    
    // Get user authentication from Supabase Auth
    const supabase = await createServerSupabaseClient();
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.log('❌ User not authenticated:', authError?.message);
      return NextResponse.json(
        { success: false, error: 'User not authenticated' },
        { status: 401 }
      );
    }

    // Get user profile from database
    const { data: profile, error: profileError } = await supabase
      .from('users')
      .select('*')
      .eq('id', user.id)
      .single();
      
    if (profileError || !profile) {
      console.log('❌ User profile not found for:', user.id, profileError?.message);
      return NextResponse.json(
        { success: false, error: 'User profile not found' },
        { status: 404 }
      );
    }
    
    console.log('✅ PDF Export - Auth status:', { 
      userId: user.id, 
      email: user.email,
      subscriptionStatus: profile.subscription_status 
    });
    
    let body: ExportPDFRequest;
    try {
      body = await request.json();
    } catch (parseError) {
      console.log('❌ Failed to parse request body:', parseError);
      return NextResponse.json(
        { success: false, error: 'Invalid JSON in request body' },
        { status: 400 }
      );
    }
    
    const { courseId, courseData } = body;

    if (!courseData) {
      console.log('❌ Course data missing from request');
      return NextResponse.json(
        { success: false, error: 'Course data is required' },
        { status: 400 }
      );
    }
    
    // Validate course data structure
    if (!courseData.title) {
      console.log('❌ Course title missing');
      return NextResponse.json(
        { success: false, error: 'Course title is required' },
        { status: 400 }
      );
    }
    
    if (!Array.isArray(courseData.modules)) {
      console.log('❌ Course modules invalid or missing');
      return NextResponse.json(
        { success: false, error: 'Course modules must be an array' },
        { status: 400 }
      );
    }
    
    console.log('📊 Course data validated:', {
      title: courseData.title,
      modulesCount: courseData.modules.length,
      courseId: courseId
    });

    // All users can export PDF, but Pro users get custom branding and no watermark
    const isPro = profile.subscription_status === 'pro' || profile.subscription_status === 'lifetime';

    // Use course data directly
    const course = courseData;

    // For now, use default branding (we can add custom branding later)
    const branding = {
      logo_url: null,
      primary_color: '#3B82F6', // Default blue
      footer_text: isPro ? 'Generated by TweetToCourse' : null
    };
    console.log('🎨 Branding settings:', { isPro, branding });

    // Generate PDF
    console.log('📄 Starting PDF generation with jsPDF');
    
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    const maxWidth = pageWidth - (margin * 2);
    
    let yPosition = margin;
    
    console.log('📐 PDF dimensions:', {
      pageWidth,
      pageHeight,
      margin,
      maxWidth
    });

    // Skip logo for now - we can add this feature later if needed
    // This simplifies the PDF generation and avoids potential image loading errors

    // Helper function to add text with word wrapping and custom colors
    const addText = (text: string, fontSize: number = 12, isBold: boolean = false, useCustomColor: boolean = false) => {
      pdf.setFontSize(fontSize);
      pdf.setFont('helvetica', isBold ? 'bold' : 'normal');
      
      // Apply custom colors for Pro users
      if (isPro && useCustomColor && branding.primary_color) {
        const color = branding.primary_color;
        const r = parseInt(color.slice(1, 3), 16);
        const g = parseInt(color.slice(3, 5), 16);
        const b = parseInt(color.slice(5, 7), 16);
        pdf.setTextColor(r, g, b);
      } else {
        pdf.setTextColor(0, 0, 0); // Default black
      }
      
      const lines = pdf.splitTextToSize(text, maxWidth);
      
      // Check if we need a new page
      if (yPosition + (lines.length * fontSize * 0.5) > pageHeight - margin) {
        pdf.addPage();
        yPosition = margin;
      }
      
      pdf.text(lines, margin, yPosition);
      yPosition += lines.length * fontSize * 0.5 + 5;
    };

    // Add title with custom color
    addText(course.title, 20, true, true);
    yPosition += 10;

    // Add generation date
    addText(`Generated on: ${new Date().toLocaleDateString()}`, 10);
    yPosition += 15;

    // Add modules
    const modules = Array.isArray(course.modules) ? course.modules : [];
    
    modules.forEach((module: unknown, index: number) => {
      // Module title with custom color
      addText(`Module ${index + 1}: ${(module as any).title}`, 16, true, true);
      yPosition += 5;
      
      // Module summary
      if (module.summary) {
        addText(module.summary, 12);
        yPosition += 10;
      }
      
      // Takeaways
      if (module.takeaways && Array.isArray(module.takeaways)) {
        addText('Key Takeaways:', 14, true, true);
        yPosition += 5;
        
        module.takeaways.forEach((takeaway: string) => {
          addText(`• ${takeaway}`, 12);
        });
        yPosition += 15;
      }
    });

    // Add footer to each page
    const totalPages = pdf.getNumberOfPages();
    console.log('📄 Adding footer to', totalPages, 'pages. isPro:', isPro);
    
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(10);
      pdf.setTextColor(150, 150, 150);
      
      if (isPro) {
        // Use custom footer text for Pro users
        const footerText = 'Generated by TweetToCourse';
        console.log('📄 Adding Pro footer:', footerText);
        pdf.text(footerText, pageWidth / 2, pageHeight - 10, { align: 'center' });
      } else {
        // Add watermark for free users
        console.log('📄 Adding watermark for free user');
        pdf.text('Generated by TweetToCourse - Upgrade to remove watermark', 
          pageWidth / 2, pageHeight - 10, { align: 'center' });
      }
    }

    // Log the export action
    try {
      await supabase
        .from('usage_logs')
        .insert({
          user_id: user.id,
          action: 'export_pdf',
          metadata: {
            course_id: courseData.id || 'unknown',
            course_title: courseData.title
          }
        });
      console.log('✅ PDF export logged successfully');
    } catch (logError) {
      console.error('⚠️ Failed to log PDF export:', logError);
      // Don't fail the PDF generation for logging errors
    }

    // Generate PDF buffer
    console.log('📦 Generating PDF buffer...');
    
    let pdfBuffer: Buffer;
    try {
      const pdfOutput = pdf.output('arraybuffer');
      pdfBuffer = Buffer.from(pdfOutput);
      
      console.log('✅ PDF buffer generated successfully:', {
        size: pdfBuffer.length,
        sizeKB: Math.round(pdfBuffer.length / 1024),
        sizeMB: Math.round(pdfBuffer.length / (1024 * 1024) * 100) / 100
      });
      
      if (pdfBuffer.length === 0) {
        throw new Error('Generated PDF buffer is empty');
      }
      
    } catch (bufferError) {
      console.error('❌ Failed to generate PDF buffer:', bufferError);
      return NextResponse.json(
        { 
          success: false, 
          error: 'Failed to generate PDF buffer',
          details: bufferError instanceof Error ? bufferError.message : 'Unknown buffer error'
        },
        { status: 500 }
      );
    }

    // Create safe filename
    const filename = `${course.title.replace(/[^a-zA-Z0-9\s-]/g, '').replace(/\s+/g, '_')}_course.pdf`;
    
    console.log('📤 Returning PDF download:', {
      filename,
      bufferSize: pdfBuffer.length,
      contentType: 'application/pdf'
    });
    
    return new NextResponse(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': pdfBuffer.length.toString(),
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      },
    });

  } catch (error) {
    console.error('PDF export error:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to export PDF',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json(
    { success: false, error: 'GET method not supported' },
    { status: 405 }
  );
}